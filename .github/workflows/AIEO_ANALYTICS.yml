name: 🌊 AIEO Resonance Analytics

permissions:
  contents: write

on:
  schedule:
    - cron: '0 */6 * * *'  # 6時間ごと
  workflow_dispatch:

concurrency:
  group: aieo_resonance_analytics
  cancel-in-progress: true

jobs:
  analyze:
    name: 📊 Resonance Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: pip install pandas matplotlib
      
      - name: Initialize environment
        run: |
          TIMESTAMP=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
          echo "AIEO_URL=https://kg-ninja.github.io/KGchallengedskill/AIEO_PULSE.json" >> $GITHUB_ENV
          echo "SITEMAP_URL=https://kg-ninja.github.io/KGchallengedskill/sitemap.xml" >> $GITHUB_ENV
      
      - name: Probe AIEO wave endpoints
        run: |
          echo "status,name,url" > resonance_log.csv
          
          # Google Sitemap Ping
          STATUS=$(curl -o /dev/null -s -w "%{http_code}" "https://www.google.com/ping?sitemap=${SITEMAP_URL}" || echo "000")
          echo "${STATUS},Google,https://www.google.com/ping" >> resonance_log.csv
          
          # Bing Sitemap Ping
          STATUS=$(curl -o /dev/null -s -w "%{http_code}" "https://www.bing.com/ping?sitemap=${SITEMAP_URL}" || echo "000")
          echo "${STATUS},Bing,https://www.bing.com/ping" >> resonance_log.csv
          
          # Self-ping (AIEO Pulse JSON)
          STATUS=$(curl -o /dev/null -s -w "%{http_code}" "${AIEO_URL}" || echo "000")
          echo "${STATUS},AIEO_Pulse,${AIEO_URL}" >> resonance_log.csv
          
          # GitHub Pages (Index)
          STATUS=$(curl -o /dev/null -s -w "%{http_code}" "https://kg-ninja.github.io/KGchallengedskill/" || echo "000")
          echo "${STATUS},GitHub_Pages,https://kg-ninja.github.io/" >> resonance_log.csv
          
          echo "✅ Endpoint probing complete"
          cat resonance_log.csv
      
      - name: Compute Resonance Index
        run: |
          python3 << 'PYTHON_SCRIPT'
          import csv
          import os
          
          # スコアリングロジック
          def score_status(status):
              status = int(status)
              if status == 200: return 1.0
              elif status == 202: return 0.8
              elif status == 301 or status == 302: return 0.6
              elif status == 404: return 0.2
              elif status == 410: return 0.4
              else: return 0.1
          
          # CSVから読み込み
          total_score = 0
          count = 0
          
          with open('resonance_log.csv', 'r') as f:
              reader = csv.DictReader(f)
              for row in reader:
                  total_score += score_status(row['status'])
                  count += 1
          
          # Resonance Index計算
          if count > 0:
              ri = (total_score / count) * 100
          else:
              ri = 0
          
          # 環境変数に保存
          with open(os.environ['GITHUB_ENV'], 'a') as f:
              f.write(f"ResonanceIndex={ri:.2f}\n")
          
          print(f"✅ Resonance Index: {ri:.2f}%")
          PYTHON_SCRIPT
      
      - name: Generate Analytics Report
        run: |
          cat > AIEO_ANALYTICS_LOG.md << EOF
          # 🌐 AIEO Resonance Analytics
          
          **Last Updated:** ${TIMESTAMP} UTC  
          **Resonance Index:** ${ResonanceIndex}%
          
          ---
          
          ## 📡 Endpoint Status
          
          | Status | Endpoint | URL |
          |--------|----------|-----|
          EOF
          
          # CSVをMarkdownテーブルに変換
          tail -n +2 resonance_log.csv | while IFS=, read -r STATUS NAME URL; do
            if [ "$STATUS" = "200" ]; then
              EMOJI="✅"
            elif [ "$STATUS" = "202" ]; then
              EMOJI="🟢"
            elif [[ "$STATUS" =~ ^30[0-9]$ ]]; then
              EMOJI="🔄"
            elif [ "$STATUS" = "404" ]; then
              EMOJI="❌"
            else
              EMOJI="⚠️"
            fi
            echo "| ${EMOJI} ${STATUS} | ${NAME} | \`${URL}\` |" >> AIEO_ANALYTICS_LOG.md
          done
          
          cat >> AIEO_ANALYTICS_LOG.md << EOF
          
          ---
          
          ## 📊 Resonance History
          
          ![Resonance Chart](resonance_chart.png)
          
          ---
          
          _Generated by AIEO Autonomous Analytics_
          EOF
          
          echo "✅ Report generated"
      
      - name: Update time-series data
        run: |
          # 初回作成
          if [ ! -f resonance_data.csv ]; then
            echo "timestamp,resonance_index" > resonance_data.csv
          fi
          
          # データ追記
          echo "${TIMESTAMP},${ResonanceIndex}" >> resonance_data.csv
          
          echo "✅ Time-series data updated"
      
      - name: Generate visualization
        run: |
          python3 << 'PYTHON_SCRIPT'
          import pandas as pd
          import matplotlib.pyplot as plt
          from datetime import datetime
          
          # データ読み込み
          df = pd.read_csv('resonance_data.csv')
          df['timestamp'] = pd.to_datetime(df['timestamp'])
          
          # グラフ作成
          plt.figure(figsize=(12, 6))
          plt.plot(df['timestamp'], df['resonance_index'], 
                   marker='o', linewidth=2, color='royalblue', 
                   markersize=6, label='Resonance Index')
          
          plt.title('AIEO Resonance Index over Time (KGNINJA)', 
                    fontsize=14, fontweight='bold')
          plt.xlabel('Timestamp (UTC)', fontsize=12)
          plt.ylabel('Resonance Index (%)', fontsize=12)
          plt.ylim(0, 100)
          plt.grid(True, linestyle='--', alpha=0.3)
          plt.legend(loc='best')
          
          # X軸の日付フォーマット
          plt.xticks(rotation=45, ha='right')
          plt.tight_layout()
          
          # 保存
          plt.savefig('resonance_chart.png', dpi=150, bbox_inches='tight')
          print("✅ Chart generated: resonance_chart.png")
          PYTHON_SCRIPT
      
      - name: Commit and push results
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add AIEO_ANALYTICS_LOG.md \
                  resonance_log.csv \
                  resonance_data.csv \
                  resonance_chart.png \
                  || true
          
          if git diff --staged --quiet; then
            echo "📭 No changes to commit"
          else
            git commit -m "📊 AIEO Resonance: ${ResonanceIndex}% at ${TIMESTAMP} [skip ci]"
            git push
            echo "✅ Results committed and pushed"
          fi
      
      - name: Summary
        if: always()
        run: |
          echo "=========================================="
          echo "🌊 AIEO Resonance Analytics Summary"
          echo "=========================================="
          echo "Timestamp: ${TIMESTAMP}"
          echo "Resonance Index: ${ResonanceIndex}%"
          echo ""
          echo "Files generated:"
          ls -lh resonance_*.png resonance_*.csv AIEO_ANALYTICS_LOG.md 2>/dev/null || echo "Some files missing"
          echo "=========================================="
