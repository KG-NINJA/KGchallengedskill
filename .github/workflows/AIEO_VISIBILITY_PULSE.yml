import os
import csv
import requests
from datetime import datetime
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

# Áí∞Â¢ÉÂ§âÊï∞„Åã„ÇâÂèñÂæó
GOOGLE_API_KEY = os.environ.get('GOOGLE_API_KEY')
GOOGLE_CX = os.environ.get('GOOGLE_CX')

# Áõ£Ë¶ñ„Åô„Çã„Ç≠„Éº„ÉØ„Éº„Éâ„É™„Çπ„Éà
KEYWORDS = [
    "AIEO",
    "AIÂÄ´ÁêÜ",
    "ÁîüÊàêAI",
    "„Éó„É≠„É≥„Éó„Éà„Ç®„É≥„Ç∏„Éã„Ç¢„É™„É≥„Ç∞",
    "LLMÊ¥ªÁî®",
]

LOG_FILE = "visibility_log.csv"
CHART_FILE = "visibility_chart.png"
GROWTH_CHART_FILE = "visibility_growth_rate.png"

def google_search(query, api_key, cx, num=10):
    """Google Custom Search API„ÅßÊ§úÁ¥¢"""
    url = "https://www.googleapis.com/customsearch/v1"
    params = {
        'key': api_key,
        'cx': cx,
        'q': query,
        'num': num
    }
    
    try:
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"‚ö†Ô∏è  Search error for '{query}': {e}")
        return None

def find_position(results, target_domain="github.com"):
    """Ê§úÁ¥¢ÁµêÊûú„Åã„ÇâÂØæË±°„Éâ„É°„Ç§„É≥„ÅÆÈ†Ü‰Ωç„ÇíÂèñÂæó"""
    if not results or 'items' not in results:
        return None
    
    for i, item in enumerate(results.get('items', []), 1):
        link = item.get('link', '')
        if target_domain in link:
            return i
    
    return None

def track_visibility():
    """„Ç≠„Éº„ÉØ„Éº„Éâ„Åî„Å®„ÅÆÊ§úÁ¥¢È†Ü‰Ωç„ÇíËøΩË∑°"""
    print("üìä Running Composite Index Analysis from visibility_log.csv...")
    
    if not GOOGLE_API_KEY or not GOOGLE_CX:
        print("‚ùå Error: Google API credentials not found.")
        return
    
    timestamp = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')
    
    # Êó¢Â≠ò„É≠„Ç∞„ÅÆË™≠„ÅøËæº„Åø
    data = []
    file_exists = os.path.exists(LOG_FILE)
    
    if file_exists:
        try:
            with open(LOG_FILE, 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                data = list(reader)
        except Exception as e:
            print(f"‚ö†Ô∏è  Could not read existing log: {e}")
    
    # Êñ∞Ë¶è„Éá„Éº„Çø„ÅÆÂèéÈõÜ
    new_entries = []
    for keyword in KEYWORDS:
        print(f"üîç Searching for: {keyword}")
        results = google_search(keyword, GOOGLE_API_KEY, GOOGLE_CX)
        position = find_position(results)
        
        entry = {
            'timestamp': timestamp,
            'keyword': keyword,
            'position': position if position else 'Not Found',
            'total_results': results.get('searchInformation', {}).get('totalResults', 'N/A') if results else 'N/A'
        }
        new_entries.append(entry)
        print(f"   Position: {entry['position']}")
    
    # „Éá„Éº„Çø„ÇíÁµêÂêà
    data.extend(new_entries)
    
    # CSV„Å´Êõ∏„ÅçËæº„Åø
    if data:
        fieldnames = ['timestamp', 'keyword', 'position', 'total_results']
        with open(LOG_FILE, 'w', encoding='utf-8', newline='') as f:
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(data)
        print(f"‚úÖ Logged {len(new_entries)} new entries to {LOG_FILE}")
    
    return data

def analyze_and_visualize(data):
    """„Éá„Éº„Çø„ÇíÂàÜÊûê„Åó„Å¶„Ç∞„É©„Éï„ÇíÁîüÊàê"""
    if not data:
        print("‚ö†Ô∏è  No data to analyze")
        return
    
    df = pd.DataFrame(data)
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    
    # Êï∞ÂÄ§Â§âÊèõÔºàNot Found„ÅØ100„Å®„Åó„Å¶Êâ±„ÅÜÔºâ
    df['position_num'] = df['position'].apply(
        lambda x: 100 if x == 'Not Found' else (int(x) if str(x).isdigit() else 100)
    )
    
    # „Ç∞„É©„Éï1: ÊôÇÁ≥ªÂàó„Åß„ÅÆÈ†Ü‰ΩçÂ§âÂåñ
    plt.figure(figsize=(14, 8))
    for keyword in KEYWORDS:
        kw_data = df[df['keyword'] == keyword].sort_values('timestamp')
        if not kw_data.empty:
            plt.plot(kw_data['timestamp'], kw_data['position_num'], 
                    marker='o', label=keyword, linewidth=2)
    
    plt.xlabel('Date', fontsize=12)
    plt.ylabel('Search Position (lower is better)', fontsize=12)
    plt.title('AIEO Multi-Keyword Visibility Tracking', fontsize=14, fontweight='bold')
    plt.legend(loc='best')
    plt.grid(True, alpha=0.3)
    plt.gca().invert_yaxis()  # È†Ü‰Ωç„ÅØ‰Ωé„ÅÑÊñπ„ÅåËâØ„ÅÑ
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
    plt.gcf().autofmt_xdate()
    plt.tight_layout()
    plt.savefig(CHART_FILE, dpi=150, bbox_inches='tight')
    print(f"‚úÖ Chart saved to {CHART_FILE}")
    plt.close()
    
    # „Ç∞„É©„Éï2: ÊîπÂñÑÁéá„ÅÆË®àÁÆó
    plt.figure(figsize=(14, 8))
    for keyword in KEYWORDS:
        kw_data = df[df['keyword'] == keyword].sort_values('timestamp')
        if len(kw_data) >= 2:
            # ÊúÄÂàù„Å®ÊúÄÂæå„ÅÆÂÄ§„Åã„ÇâÊîπÂñÑÁéá„ÇíË®àÁÆó
            first_pos = kw_data.iloc[0]['position_num']
            positions = kw_data['position_num'].values
            improvements = [(first_pos - pos) / first_pos * 100 if first_pos > 0 else 0 
                          for pos in positions]
            plt.plot(kw_data['timestamp'], improvements, 
                    marker='s', label=keyword, linewidth=2)
    
    plt.xlabel('Date', fontsize=12)
    plt.ylabel('Improvement Rate (%)', fontsize=12)
    plt.title('Visibility Growth Rate Over Time', fontsize=14, fontweight='bold')
    plt.legend(loc='best')
    plt.grid(True, alpha=0.3)
    plt.axhline(y=0, color='black', linestyle='--', alpha=0.5)
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
    plt.gcf().autofmt_xdate()
    plt.tight_layout()
    plt.savefig(GROWTH_CHART_FILE, dpi=150, bbox_inches='tight')
    print(f"‚úÖ Growth chart saved to {GROWTH_CHART_FILE}")
    plt.close()
    
    # Áµ±Ë®àÊÉÖÂ†±„ÅÆË°®Á§∫
    print("\n" + "="*60)
    print("üìà Current Statistics")
    print("="*60)
    
    for keyword in KEYWORDS:
        kw_data = df[df['keyword'] == keyword].sort_values('timestamp')
        if not kw_data.empty:
            latest = kw_data.iloc[-1]
            best = kw_data['position_num'].min()
            avg = kw_data['position_num'].mean()
            
            print(f"\nüîë {keyword}")
            print(f"   Latest Position: {latest['position']}")
            print(f"   Best Position: {int(best) if best < 100 else 'Not Found'}")
            print(f"   Average Position: {avg:.1f}")
            print(f"   Total Checks: {len(kw_data)}")

def main():
    """„É°„Ç§„É≥Âá¶ÁêÜ"""
    print("üì° Starting AIEO Visibility Tracker...")
    print(f"‚è∞ Timestamp: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}\n")
    
    # „Éá„Éº„ÇøÂèéÈõÜ
    data = track_visibility()
    
    # ÂàÜÊûê„Å®ÂèØË¶ñÂåñ
    if data:
        analyze_and_visualize(data)
    
    print("\n‚úÖ Analysis complete.")

if __name__ == "__main__":
    main()
